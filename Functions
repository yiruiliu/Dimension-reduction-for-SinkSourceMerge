
###############Subfunction that permutes column "c1" of matrix "A"
###############with column "c2" of matrix "A"
matrixperm:=function(A,c1,c2)
local B,C,CC;
	B:=TransposedMat(A);
	C:=ShallowCopy(B);
	C[c1]:=B[c2];
	C[c2]:=B[c1];
	CC:=TransposedMat(C);
	return CC;
end;

MatrixAddColumn:=function(A,b)
	local AT,Af;
	AT:=TransposedMat(A);
	AT:=ShallowCopy(AT);
	Append(AT,[b]);
	Af:=TransposedMat(AT);
	return Af;
end;

MatrixRemoveColumn:=function(A,index)
	local AT,Af;
	AT:=TransposedMat(A);
	AT:=ShallowCopy(AT);
	Remove(AT,index);
	Af:=TransposedMat(AT);
	return Af;
end;

MatrixGetColumn:=function(A,index)
	local AT,b;
	AT:=TransposedMat(A);
	AT:=ShallowCopy(AT);
	b:=AT[index];
	return b;
end;

SortColumnDescent:=function(A)
	local AT,list1;
	AT:=TransposedMat(A);
	AT:=ShallowCopy(AT);
	list1:=Reversed([1..Size(AT)]);
	SortParallel(list1,AT);
	return TransposedMat(AT);
end;

matrixpermForEE:=function(A,listofedges)
local i,c1,c2,Aprime;
Aprime:=ShallowCopy(A);
for i in [1..Size(listofedges)] do
	c1:=i;
	c2:=set2int([listofedges[i]]);
	if not c1=c2 then
		Aprime:=matrixperm(Aprime,c1,c2);
	fi;
od;
return SortColumnDescent(Aprime);
end;


#####LP   max c'x over Ax<=b rlist[3] is the objective value, rlist[5] is the x*
LPyirui:=function(obj,A,b,linrows,qs_exec)
local  rlist, s;
    rlist := LoadQSLP( [  ], A, b,linrows, qs_exec );
    s := rlist[1];
    LoadQSLPobj( s, obj );
    SolveQSLP( s, [  ] );
    rlist := GetQSLPsol_primal( s );
    return [rlist[3],rlist[5]];
end;    

LPyirui1:=function(obj,A,b,linrows,qs_exec)
local  rlist, s;
    rlist := LoadQSLP( obj, A, b,linrows, qs_exec );
    s := rlist[1];
    SolveQSLP( s, [2] );
    rlist := GetQSLPsol_primal( s );
    return [rlist[3],rlist[5]];
end;    

EqualityEliminationDetectfFullDim:=function(A,b,qs_exec)
	local f,AT,Anew,addrow,addcolumn,bnew,XFVAL;
	f:=ZeroMutable([1..Size(A[1])]);
	Append(f,[1]);
	addcolumn:=ZeroMutable([1..Size(A)])+1;
	Anew:=MatrixAddColumn(A,addcolumn);
	addrow:=ZeroMutable([1..Size(A[1])]);
	Append(addrow,[1]);
	Anew:=ShallowCopy(Anew);
	Append(Anew,[addrow]);
	bnew:=ShallowCopy(b);
	Append(bnew,[1]);
	XFVAL:=LPyirui1(f,Anew,bnew,[ ],qs_exec);
	return XFVAL;
end;

#for i in [1..Size(Anew[1])-1] do
#	z:=ZeroMutable([1..Size(Anew[1])]);
#	z[i]:=-1;
#	Append(Anew,[z]);
#	Append(bnew,[0]);
#od;

EqualityEliminationDual:=function(A,b,qs_exec)
	local A1,Aprime,addcolumn,aa,bprime,f,zj,linrows,XFVAL,i;
	A1:=ShallowCopy(A);
	addcolumn:=ZeroMutable([1..Size(A1[1])]);
	Append(A1,[addcolumn]);
	Aprime:=TransposedMat(A1);
	Aprime:=ShallowCopy(Aprime);
	aa:=ZeroMutable([1..Size(Aprime[1])])+1;
	Append(Aprime,[aa]);
	bprime:=ZeroMutable([1..Size(Aprime)-1]);
	Append(bprime,[1]);
	f:=ShallowCopy(b);
	Append(f,[1]);
	linrows:=[1..Size(Aprime)];
	for i in [1..Size(Aprime[1])] do
		zj:=ZeroMutable([1..Size(Aprime[1])]);
		zj[i]:=-1;  #add -1x<=0 for lower bound
		Append(Aprime,[zj]);
		Append(bprime,[0]);
	od;
	XFVAL:=LPyirui1(-f,Aprime,bprime,linrows,qs_exec);
	return XFVAL;
end;

EqualityEliminationEE:=function(Equal,A)
	local AT,AA,i,jb,R,z,posi,p1,rr,j,c,AaT,Z;
	AA:=ShallowCopy(A);
	AT:=TransposedMat(AA);
	jb:=RREF(Equal);
	Z:=[];
	for i in [1..Size(jb)] do
		R:=jb[i];
		z:=PositionNthOccurrence(R,1,1); #jb(i)
		if not z=fail then
			Append(Z,[z]);
			R[z]:=0;
			posi:=[1..Size(R)];
			p1:=PositionsProperty(R,IsZero);
			rr:=Difference(posi,p1); #find(R~=0);
			AaT:=NullMat(Size(AT),Size(AT[1]));
			for j in [1..Size(rr)] do
				c:=AT[z]*-R[rr[j]];
				AaT[rr[j]]:=c;
			od;
			AA:=AA+TransposedMat(AaT);
		fi;
	od;
	AT:=TransposedMat(AA);
	AT:=ShallowCopy(AT);
	for i in [1..Size(Z)] do
		AT[Z[i]]:=AT[Z[i]]*0;
	od;
	AA:=TransposedMat(AT);
	return AA;
end;

EqualityEliminationinitialize:=function(Equal,Amatrix,b,listofedge)
	local Equalp,Amatrixp,Equalp_c,Amatrixp_b,aa,ET,AT;
	Equalp:=matrixpermForEE(Equal,listofedge);
	Amatrixp:=matrixpermForEE(Amatrix,listofedge);
	aa:=ZeroMutable([1..Size(Equal)]);
	Equalp_c:=MatrixAddColumn(Equalp,aa);
	Amatrixp_b:=MatrixAddColumn(Amatrixp,-b);
	return [Equalp_c,Amatrixp_b];
end;



EqualityEliminationMain:=function(Equal,Amatrix,b,listofedge,qs_exec)
	local AllEqual,Equalp_c,Amatrixp_b,A12,FVAL,AA,A1,b1,XF,XF1,pz0,
	pz,X1,AA1,f,AT,Anew,addrow,addcolumn,bnew,XFVAL,rlist, s,rlist_dual,numofiter;
	AllEqual:=[];
	A12:=EqualityEliminationinitialize(Equal,Amatrix,b,listofedge);
	Equalp_c:=A12[1];
	Amatrixp_b:=A12[2];
	Append(AllEqual,Equalp_c);
	FVAL:=0;
	numofiter:=0;
	while FVAL=0 do
		numofiter:=numofiter+1;
		AA:=EqualityEliminationEE(Equalp_c,Amatrixp_b);
		A1:=ShallowCopy(AA);
		b1:=-MatrixGetColumn(AA,Size(AA[1]));
		A1:=MatrixRemoveColumn(A1,Size(A1[1]));
		##
		#XF:=EqualityEliminationDetectfFullDim(A1,b1,qs_exec);
		f:=ZeroMutable([1..Size(A1[1])]);
		Append(f,[1]);
		addcolumn:=ZeroMutable([1..Size(A1)])+1;
		Anew:=MatrixAddColumn(A1,addcolumn);
		addrow:=ZeroMutable([1..Size(A1[1])]);
		Append(addrow,[1]);
		Anew:=ShallowCopy(Anew);
		Append(Anew,[addrow]);
		bnew:=ShallowCopy(b1);
		Append(bnew,[1]);
		rlist := LoadQSLP( f, Anew, bnew,[ ], qs_exec );
		s := rlist[1];
		SolveQSLP( s, [2] );
		rlist := GetQSLPsol_primal( s );
		XF:=[rlist[3],rlist[5]];
		###
		FVAL:=XF[1];
		if FVAL=0 then
			##XF1:=EqualityEliminationDual(A1,b1,qs_exec);
			rlist_dual := GetQSLPsol_dual( s );
			XF1:=[rlist_dual[3],rlist_dual[5]];
			###
			X1:=XF1[2];
			AA1:=MatrixAddColumn(A1,-b1);
			pz0:=PositionsProperty(X1,IsZero);
			pz:=Difference([1..Size(X1)],pz0);
			Equalp_c:=AA1{pz};
			Append(AllEqual,Equalp_c);
			Remove(pz0,Size(pz0));
			Amatrixp_b:=AA1{pz0};
		fi;
	od;
    return [A1,b1,AllEqual];
end;

#################
NCShannonBoundedForrMarginalEntropy:=function ( ncinstance )
    local  ShOB, i, linrows, con, conlin, j, conineq;
    ShOB := GenShannonUnBounded( ncinstance[3] );
    i := Size( ShOB[1] ) + 1;
    linrows := [  ];
    for con  in ncinstance[1]  do     #### H(Out(t),In(t))=H(In(t))
        conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
        conlin[set2int( con[1] )] := 1;
        conlin[set2int( con[2] )] := -1;
        Append( ShOB[1], [ conlin ] );
        Append( ShOB[2], [ 0 ] );
        Append( linrows, [ i ] );
        i := i + 1;
    od;
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    if ncinstance[2]>1 then
		for j  in [ 1 .. ncinstance[2] ]  do    #### H(s1,s2,..,sj)=H(s1)+H(s2)+,...,+H(sj)
			conlin[set2int( [ j ] )] := 1;
		od;
		conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
		Append( ShOB[1], [ conlin ] );
		Append( ShOB[2], [ 0 ] );
		Append( linrows, [ i ] );
		i := i + 1;
    fi;
    for j in [1..ncinstance[3]] do
		conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
		conlin[set2int( [ j ] )] := -1;
		Append( ShOB[1], [ conlin ] );
		Append( ShOB[2], [ 0 ] );
    od;
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 1 .. ncinstance[3] ]  do    #### sum<=1
        conlin[set2int( [ j ] )] := 1;
    od;
    Append( ShOB[1], [ conlin ] );
	Append( ShOB[2], [ 1 ] );
    return [ ShOB[1], ShOB[2], linrows ];
end;

RemoveZeroColumn:=function(A)
	local AT,i,zeroind,indi,ATT;
	AT:=TransposedMat(A);
	zeroind:=[];
	for i in [1..Size(AT)] do
		if Maximum(AT[i])=0 and Minimum(AT[i])=0 then
			Append(zeroind,[i]);
		fi;
	od;
    indi:=Difference([1..Size(AT)],zeroind);
    ATT:=AT{indi};
    return TransposedMat(ATT);
end;

####function that add zero
AddZero:=function(H,position)
	local HH,i;
	HH:=ShallowCopy(H);
	for i in [1..Size(HH)] do
		Add(HH[i],0,position);
	od;
	return HH;
end;
####function that combine H and Equal
CombineHandEqual:=function(H,Equal,ncinstance3)
	local HH,EqualRemove,REqual,i,REqualT,REqualTR,REqualR,REqualfinal,REqualfinalSort,a;
	EqualRemove:=MatrixRemoveColumn(Equal,Size(Equal[1]));
	REqual:=RREF(EqualRemove);
	REqualT:=TransposedMat(REqual);
	REqualTR:=RemoveZeroColumn(REqualT);
	REqualR:=TransposedMat(REqualTR);
	REqualfinal:=[];
	for i in [1..Size(REqualR)] do
		if PositionNthOccurrence(REqualR[i],1,1)>Size(REqualR[i])-ncinstance3 then
			Append(REqualfinal,[REqualR[i]]);
		fi;
	od;
	REqualfinalSort:=Reversed(SortColumnDescent(REqualfinal));
	HH:=ShallowCopy(H);
	for i in [1..Size(REqualfinalSort)] do
		HH:=AddZero(HH,PositionNthOccurrence(REqualfinalSort[i],1,1));
	od;
	a:=[1..ncinstance3+1];
	for i in [1..Size(REqualfinalSort)] do
		Append(HH,[REqualfinalSort[i]{a}]);
		Append(HH,[-REqualfinalSort[i]{a}]);
	od;
	return HH;
end;

CombineVandEqual:=function(V,Equal,ncinstance3)
	local EqualRemove,REqual,i,REqualT,REqualTR,REqualR,REqualfinal,REqualfinalSort,VV,a
	,posi,REqualfinalSortShort,j;
	EqualRemove:=MatrixRemoveColumn(Equal,Size(Equal[1]));
	REqual:=RREF(EqualRemove);
	REqualT:=TransposedMat(REqual);
	REqualTR:=RemoveZeroColumn(REqualT);
	REqualR:=TransposedMat(REqualTR);
	REqualfinal:=[];
	for i in [1..Size(REqualR)] do
		if PositionNthOccurrence(REqualR[i],1,1)>Size(REqualR[i])-ncinstance3 then
			Append(REqualfinal,[REqualR[i]]);
		fi;
	od;
	REqualfinalSort:=Reversed(SortColumnDescent(REqualfinal));
	VV:=ShallowCopy(V);
	for i in [1..Size(REqualfinalSort)] do
		VV:=AddZero(VV,PositionNthOccurrence(REqualfinalSort[i],1,1));
	od;
	a:=[1..ncinstance3];
	for i in [1..Size(REqualfinalSort)] do
		REqualfinalSortShort:=REqualfinalSort[i]{a};
		posi:=PositionNthOccurrence(REqualfinalSort[i],1,1);
		REqualfinalSortShort[posi]:=0;
		for j in [1..Size(VV)] do
			VV[j][posi]:=VV[j]*-REqualfinalSortShort;
		od;
	od;
	return VV;
end;
####
NCRateRegionOBForrMarginalEntropy:=function ( ncinstance, usesym, optargs )
    local  rlist, A, b, linrows,Rlinrows,i, listofedge,Equal, G, rlist1, ineq, ineqorb, row, rrA, rrb, 
    onemap, nslist, idx, nsrec, los, lolos, Oi, O, trans_ineq,conineq,A1,b1,AT,indi,AB;
    rlist := NCShannonBoundedForrMarginalEntropy( ncinstance );
    A := rlist[1];
    b := rlist[2];
    linrows := rlist[3];
    Equal:=A{linrows};
    Rlinrows:=Reversed(linrows);
    for i in [1..Size(Rlinrows)] do
		Remove(A,Rlinrows[i]);
		Remove(b,Rlinrows[i]);
    od;
    if usesym = false  then
        G := Group( [ () ] );
    else
        G := NetSymGroup( ncinstance );
    fi;
    if Size( optargs ) > 0  then
        nslist := [  ];
        nsrec := optargs[1];
        for idx  in RecNamesInt( nsrec )  do
            lolos := nsrec.(idx);
            for los  in lolos  do
                if idx = 1  then
                    ineq := ZYNonShannon( los, ncinstance[3] );
                    ineqorb := Orbit( G, ineq, OnEntropySpace );
                    Append( nslist, ineqorb );
                else
                    ineq := DFZNonShannon( idx - 1, los, ncinstance[3] );
                    ineqorb := Orbit( G, ineq, OnEntropySpace );
                    Append( nslist, ineqorb );
                fi;
            od;
        od;
        Append( A, nslist );
        Append( b, ZeroMutable( [ 1 .. Size( nslist ) ] ) );
    fi;
    #### full-dimension
    listofedge:=[1..ncinstance[3]];
    AB:=EqualityEliminationMain(Equal,A,b,listofedge,qs_exec);
    A1:=AB[1];
    b1:=AB[2];
    A1:=SortColumnDescent(A1);
    AT:=TransposedMat(A1);
    indi:=0;
    for i in [2..ncinstance[3]] do
		if Maximum(AT[i])=0 and Minimum(AT[i])=0 then
			indi:=indi+1;
		fi;
    od;
    A1:=RemoveZeroColumn(A1);
    ###### end of full-dimension
    rlist1 := symCHM( A1, b1, [], ncinstance[3]-indi, G, OnProjPts, OnProjIneq, false );
       if rlist1[3][2]=[] then
		   rlist1[3][2]:=0;
       fi;
    Display( Concatenation( "stats:  No. of LPs solved = ", 
       String( rlist1[3][1] ), ", \n\t No. of facets = ", 
       String( Size( rlist1[2] ) ), 
       ", \n\tDD stepsizes beyond initial hull = ", String( rlist1[3][2] ) ) 
     );
     ####
    rlist1[2]:=CombineHandEqual(rlist1[2],AB[3],ncinstance[3]);
    rlist1[1]:=CombineVandEqual(rlist1[1],AB[3],ncinstance[3]);
    #####
    rrA := [  ];
    rrb := [  ];
    for row  in rlist1[2]  do
        if row[Size(row)]=0  then
            Append( rrA, [ row{[ 1 .. Size( row ) - 1 ]} ] );
            Append( rrb, [ row[Size( row )] ] );
        fi;
    od;
    trans_ineq := [  ];
    Oi := OrbitsDomain( G, rrA, OnProjIneq );
    for O  in Oi  do
        Append( trans_ineq, [ O[1] ] );
    od;
    return [ trans_ineq, RRparse( ncinstance, trans_ineq ) ];
end;
